<%- include('partials/header', { title }); %>

<% if (typeof message !== 'undefined' && message) { %>
  <div class="alert alert-info alert-dismissible fade show mb-4" role="alert">
    <%= message %>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  </div>
<% } %>

<!-- Section to display collected data files -->
<% if (typeof dataFiles !== 'undefined' && dataFiles.length > 0) { %>
  <div class="card mb-4 shadow-sm">
    <div class="card-body">
      <h3 class="card-title">Data Files</h3>
      <p class="card-text">List of collected data files. Select a file to view its contents.</p>
      
      <div class="list-group mb-3">
        <% dataFiles.forEach(file => { %>
          <div class="list-group-item d-flex justify-content-between align-items-center">
            <a href="/view/<%= file.id %>" class="text-decoration-none flex-grow-1">
              <div>
                <h5 class="mb-1"><%= file.name %></h5>
                <small class="text-muted"><%= file.path %></small>
              </div>
            </a>
            <div class="btn-group">
              <a href="/view/<%= file.id %>" class="btn btn-sm btn-outline-primary">
                <i class="bi bi-eye"></i> View
              </a>
              <a href="/file/delete/<%= file.id %>" class="btn btn-sm btn-outline-danger" 
                 onclick="return confirm('Are you sure you want to delete this file? This action cannot be undone.')">
                <i class="bi bi-trash"></i> Delete
              </a>
            </div>
          </div>
        <% }) %>
      </div>
    </div>
  </div>
<% } %>

<div class="row">
  <div class="col-lg-8">
    <div class="card mb-4 shadow-sm">
      <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h2 class="card-title mb-0">Knowledge Collection</h2>
          <% if (knowledgeBooks && knowledgeBooks.length > 0) { %>
            <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteAllModal">
              <i class="bi bi-trash"></i> Delete All
            </button>
          <% } %>
        </div>
        <p class="card-text">Browse your collected knowledge books. Click on a title to view details.</p>
        
        <!-- Search box -->
        <div class="mb-4">
          <div class="input-group">
            <span class="input-group-text"><i class="bi bi-search"></i></span>
            <input type="text" id="searchInput" class="form-control" placeholder="Search by keyword...">
          </div>
        </div>
        
        <!-- Data list -->
        <% if (knowledgeBooks && knowledgeBooks.length > 0) { %>
          <div class="list-group">
            <% knowledgeBooks.forEach((book, index) => { %>
              <div class="list-group-item searchable-item">
                <div class="d-flex justify-content-between align-items-center mb-2">
                  <a href="/details/<%= book.id %>" class="text-decoration-none text-dark flex-grow-1">
                    <h5 class="mb-1"><%= book.title %></h5>
                  </a>
                  <div>
                    <button class="btn btn-sm btn-outline-danger delete-book" data-id="<%= book.id %>" data-title="<%= book.title %>">
                      <i class="bi bi-trash"></i>
                    </button>
                  </div>
                </div>
                <a href="/details/<%= book.id %>" class="text-decoration-none text-dark">
                  <p class="mb-1 text-muted"><%= book.summary ? book.summary.substring(0, 120) + '...' : 'No summary available' %></p>
                  <div class="d-flex justify-content-between align-items-center">
                    <small>
                      <% if (book.source || book.sourceName) { %>
                        <% const sourceName = book.source || book.sourceName || 'unknown'; %>
                        <span class="badge badge-source badge-<%= sourceName.toLowerCase() %> me-2"><%= sourceName %></span>
                      <% } %>
                      <% if (book.tags && book.tags.length > 0) { %>
                        <% 
                          // Exclude source tags
                          const sourceName = (book.source || book.sourceName || '').toLowerCase();
                          const filteredTags = book.tags.filter(tag => 
                            tag.toLowerCase() !== sourceName && 
                            tag.toLowerCase() !== 'arxiv' && 
                            tag.toLowerCase() !== 'wikipedia' && 
                            tag.toLowerCase() !== 'github' && 
                            tag.toLowerCase() !== 'newsapi' &&
                            tag.toLowerCase() !== 'web'
                          );
                        %>
                        <% filteredTags.slice(0, 4).forEach(tag => { %>
                          <span class="badge bg-light text-dark me-1"><%= tag %></span>
                        <% }) %>
                        <% if (filteredTags.length > 4) { %>
                          <span class="badge bg-light text-dark">+<%= filteredTags.length - 4 %></span>
                        <% } %>
                      <% } %>
                    </small>
                    <small class="text-muted"><%= book.date ? new Date(book.date).toLocaleDateString() : (book.createdAt ? new Date(book.createdAt).toLocaleDateString() : 'Unknown date') %></small>
                  </div>
                </a>
              </div>
            <% }) %>
          </div>
        <% } else { %>
          <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> There is currently no collected data.
            <a href="/collection" class="alert-link">Start collecting data</a> to get started.
          </div>
        <% } %>
      </div>
    </div>
  </div>
  
  <div class="col-lg-4">
    <!-- Sidebar -->
    <div class="card mb-4 shadow-sm">
      <div class="card-body">
        <h3 class="card-title">Summary</h3>
        <div class="d-flex justify-content-between mb-3">
          <div>
            <h6 class="mb-0">Collected Items</h6>
            <span class="h3"><%= knowledgeBooks ? knowledgeBooks.length : 0 %></span>
          </div>
          <div>
            <h6 class="mb-0">Interest Tags</h6>
            <span class="h3"><%= interests ? interests.length : 0 %></span>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Actions -->
    <div class="card mb-4 shadow-sm">
      <div class="card-body">
        <h3 class="card-title">Actions</h3>
        <div class="d-grid gap-2">
          <a href="/collection" class="btn btn-primary">
            <i class="bi bi-cloud-download"></i> Collect New Data
          </a>
          <a href="/interests" class="btn btn-outline-secondary">
            <i class="bi bi-tags"></i> Manage Interest Tags
          </a>
          <a href="/api-keys" class="btn btn-outline-secondary">
            <i class="bi bi-key"></i> Manage API Keys
          </a>
        </div>
      </div>
    </div>
    
    <!-- Popular tags -->
    <div class="card shadow-sm mb-4">
      <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h3 class="card-title mb-0">Popular Tags</h3>
          <button class="btn btn-sm btn-outline-primary" data-bs-toggle="collapse" data-bs-target="#tagColorSettings">
            <i class="bi bi-palette"></i> Customize Colors
          </button>
        </div>
        <div class="d-flex flex-wrap">
          <% if (popularTags && popularTags.length > 0) { %>
            <% 
              // Separate source tags and other tags
              const sourceTags = ['arxiv', 'wikipedia', 'newsapi', 'github', 'web', 'duckduckgo'];
              const sourcePopularTags = popularTags.filter(tag => 
                sourceTags.includes(tag.name.toLowerCase())
              );
              const otherPopularTags = popularTags.filter(tag => 
                !sourceTags.includes(tag.name.toLowerCase())
              );
              
              // Display source tags first
              sourcePopularTags.forEach(tag => { 
            %>
              <a href="/tag/<%= tag.name %>" class="badge badge-source badge-<%= tag.name.toLowerCase() %> me-2 mb-2 p-2 tag-item" data-tag="<%= tag.name.toLowerCase() %>">
                <%= tag.name %> <span class="badge bg-light text-dark"><%= tag.count %></span>
              </a>
            <% }); %>
            
            <!-- Display other tags -->
            <% otherPopularTags.forEach(tag => { %>
              <a href="/tag/<%= tag.name %>" class="badge bg-secondary me-2 mb-2 p-2 tag-item custom-tag" data-tag="<%= tag.name.toLowerCase() %>">
                <%= tag.name %> <span class="badge bg-light text-dark"><%= tag.count %></span>
              </a>
            <% }) %>
          <% } else { %>
            <p class="text-muted">No tags available</p>
          <% } %>
        </div>
        
        <!-- Tag color customization panel -->
        <div class="collapse mt-3" id="tagColorSettings">
          <div class="card card-body">
            <h5>Tag Color Settings</h5>
            <p class="text-muted small">Select a tag above, then choose a color to customize its appearance.</p>
            
            <div class="mb-3">
              <label for="selectedTag" class="form-label">Selected Tag:</label>
              <div id="selectedTagDisplay" class="p-2 border rounded mb-2">Click on a tag to select it</div>
            </div>
            
            <div class="row g-3 mb-3">
              <div class="col-md-6">
                <label for="tagBgColor" class="form-label">Background Color:</label>
                <input type="color" class="form-control form-control-color w-100" id="tagBgColor" value="#6c757d">
              </div>
              <div class="col-md-6">
                <label for="tagTextColor" class="form-label">Text Color:</label>
                <input type="color" class="form-control form-control-color w-100" id="tagTextColor" value="#ffffff">
              </div>
            </div>
            
            <div class="d-grid">
              <button id="applyTagColor" class="btn btn-primary" disabled>Apply Color</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Tag color management -->
    <div class="card shadow-sm">
      <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h3 class="card-title mb-0">Tag Colors</h3>
          <button class="btn btn-sm btn-outline-primary" id="addCustomTagBtn">
            <i class="bi bi-plus-circle"></i> Add Custom Tag
          </button>
        </div>
        
        <p class="card-text">Pre-defined tag colors for data sources:</p>
        <div class="d-flex flex-wrap mb-3">
          <span class="badge badge-arxiv me-2 mb-2 p-2">arXiv</span>
          <span class="badge badge-wikipedia me-2 mb-2 p-2">Wikipedia</span>
          <span class="badge badge-newsapi me-2 mb-2 p-2">NewsAPI</span>
          <span class="badge badge-duckduckgo me-2 mb-2 p-2">DuckDuckGo</span>
          <span class="badge badge-github me-2 mb-2 p-2">GitHub</span>
          <span class="badge badge-web me-2 mb-2 p-2">Web</span>
          <span class="badge badge-unknown me-2 mb-2 p-2">Unknown</span>
        </div>
        
        <h5>Custom Tag Colors</h5>
        <div id="customTagsContainer" class="mb-3">
          <!-- Custom tags will be displayed here -->
        </div>
        
        <div class="row g-2 mb-3" id="tagColorEditor" style="display: none;">
          <div class="col-12">
            <div class="input-group mb-2">
              <span class="input-group-text">Tag Name</span>
              <input type="text" id="newTagName" class="form-control" placeholder="Enter tag name">
            </div>
          </div>
          <div class="col-md-6">
            <div class="input-group">
              <span class="input-group-text">Background</span>
              <input type="color" id="newTagBgColor" class="form-control form-control-color" value="#6c757d">
            </div>
          </div>
          <div class="col-md-6">
            <div class="input-group">
              <span class="input-group-text">Text</span>
              <input type="color" id="newTagTextColor" class="form-control form-control-color" value="#ffffff">
            </div>
          </div>
          <div class="col-12 mt-2">
            <div class="d-flex justify-content-between">
              <button id="saveNewTagBtn" class="btn btn-primary">Save Tag</button>
              <button id="cancelNewTagBtn" class="btn btn-outline-secondary">Cancel</button>
            </div>
          </div>
        </div>
        
        <div class="mt-2">
          <small class="text-muted">System tags have fixed colors. Custom tags will be applied to all matching tags in your collection.</small>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete "<span id="deleteItemTitle"></span>"?</p>
        <p class="text-danger">This action cannot be undone.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <a href="#" id="confirmDelete" class="btn btn-danger">Delete</a>
      </div>
    </div>
  </div>
</div>

<!-- Delete All Confirmation Modal -->
<div class="modal fade" id="deleteAllModal" tabindex="-1" aria-labelledby="deleteAllModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteAllModalLabel">Confirm Delete All</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete all knowledge books?</p>
        <p class="text-danger"><strong>Warning:</strong> This will permanently delete all collected data. This action cannot be undone.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <a href="/delete-all" class="btn btn-danger">Delete All</a>
      </div>
    </div>
  </div>
</div>

<script>
  // Search functionality
  document.getElementById('searchInput').addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    document.querySelectorAll('.searchable-item').forEach(item => {
      const text = item.textContent.toLowerCase();
      item.style.display = text.includes(searchTerm) ? '' : 'none';
    });
  });
  
  // Set up delete buttons
  document.querySelectorAll('.delete-book').forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const id = this.getAttribute('data-id');
      const title = this.getAttribute('data-title');
      
      document.getElementById('deleteItemTitle').textContent = title;
      document.getElementById('confirmDelete').href = `/delete/${id}`;
      
      const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
      deleteModal.show();
    });
  });

  // Tag color customization functionality
  document.addEventListener('DOMContentLoaded', function() {
    // Load saved custom tag colors from localStorage
    const savedTagColors = JSON.parse(localStorage.getItem('customTagColors') || '{}');
    
    // Apply saved colors to tags
    applyCustomTagColors();
    
    // Set up tag selection
    let selectedTag = null;
    const tagItems = document.querySelectorAll('.tag-item');
    const selectedTagDisplay = document.getElementById('selectedTagDisplay');
    const applyBtn = document.getElementById('applyTagColor');
    const bgColorPicker = document.getElementById('tagBgColor');
    const textColorPicker = document.getElementById('tagTextColor');
    
    // Add click event to all tags
    tagItems.forEach(tag => {
      tag.addEventListener('click', function(e) {
        // Only handle click for color customization when the settings panel is open
        if (!document.getElementById('tagColorSettings').classList.contains('show')) {
          return; // Let the default link behavior work
        }
        
        e.preventDefault(); // Prevent navigation
        
        // Clear previous selection
        tagItems.forEach(t => t.classList.remove('selected-tag'));
        
        // Set as selected
        this.classList.add('selected-tag');
        selectedTag = this.getAttribute('data-tag');
        selectedTagDisplay.textContent = selectedTag;
        selectedTagDisplay.className = this.className.replace('tag-item', '').replace('selected-tag', '');
        
        // Check if this tag already has custom colors
        if (savedTagColors[selectedTag]) {
          bgColorPicker.value = savedTagColors[selectedTag].bg;
          textColorPicker.value = savedTagColors[selectedTag].text;
        } else {
          // Default colors
          bgColorPicker.value = '#6c757d';
          textColorPicker.value = '#ffffff';
        }
        
        // Enable the apply button
        applyBtn.disabled = false;
      });
    });
    
    // Apply color to selected tag
    applyBtn.addEventListener('click', function() {
      if (!selectedTag) return;
      
      const bgColor = bgColorPicker.value;
      const textColor = textColorPicker.value;
      
      // Save to localStorage
      savedTagColors[selectedTag] = {
        bg: bgColor,
        text: textColor
      };
      localStorage.setItem('customTagColors', JSON.stringify(savedTagColors));
      
      // Apply to all matching tags on the page
      applyCustomTagColors();
      
      // Show feedback
      alert(`Color settings for "${selectedTag}" have been saved and applied!`);
    });
    
    // Apply custom colors from localStorage
    function applyCustomTagColors() {
      // Only apply to tags with custom-tag class (not system tags)
      document.querySelectorAll('.custom-tag').forEach(tag => {
        const tagName = tag.getAttribute('data-tag');
        if (savedTagColors[tagName]) {
          tag.style.backgroundColor = savedTagColors[tagName].bg;
          tag.style.color = savedTagColors[tagName].text;
        }
      });
      
      // Refresh custom tags display
      renderCustomTagsList();
    }
    
    // Add custom CSS for selected tag
    const style = document.createElement('style');
    style.textContent = `
      .selected-tag {
        box-shadow: 0 0 0 2px #007bff !important;
        position: relative;
      }
      .custom-tag-item {
        position: relative;
      }
      .tag-delete-btn {
        position: absolute;
        top: -5px;
        right: -5px;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background-color: #dc3545;
        color: white;
        font-size: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        opacity: 0;
        transition: opacity 0.2s;
      }
      .custom-tag-item:hover .tag-delete-btn {
        opacity: 1;
      }
    `;
    document.head.appendChild(style);
    
    // Add custom tag functionality
    const addCustomTagBtn = document.getElementById('addCustomTagBtn');
    const tagColorEditor = document.getElementById('tagColorEditor');
    const customTagsContainer = document.getElementById('customTagsContainer');
    const newTagNameInput = document.getElementById('newTagName');
    const newTagBgColorInput = document.getElementById('newTagBgColor');
    const newTagTextColorInput = document.getElementById('newTagTextColor');
    const saveNewTagBtn = document.getElementById('saveNewTagBtn');
    const cancelNewTagBtn = document.getElementById('cancelNewTagBtn');
    
    // Render all custom tags from localStorage
    function renderCustomTagsList() {
      customTagsContainer.innerHTML = '';
      
      const tagNames = Object.keys(savedTagColors);
      
      if (tagNames.length === 0) {
        customTagsContainer.innerHTML = '<p class="text-muted">No custom tags defined. Use the button above to add custom tags.</p>';
        return;
      }
      
      // Sort alphabetically
      tagNames.sort();
      
      tagNames.forEach(tagName => {
        const colors = savedTagColors[tagName];
        const tagElement = document.createElement('div');
        tagElement.className = 'custom-tag-item d-inline-block position-relative me-2 mb-2';
        
        const tagBadge = document.createElement('span');
        tagBadge.className = 'badge p-2';
        tagBadge.style.backgroundColor = colors.bg;
        tagBadge.style.color = colors.text;
        tagBadge.textContent = tagName;
        tagBadge.addEventListener('click', function() {
          // Open the editor for this tag
          selectTagForEditing(tagName, colors.bg, colors.text);
        });
        
        const deleteBtn = document.createElement('span');
        deleteBtn.className = 'tag-delete-btn';
        deleteBtn.innerHTML = '×';
        deleteBtn.setAttribute('title', 'Delete this tag');
        deleteBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          deleteCustomTag(tagName);
        });
        
        tagElement.appendChild(tagBadge);
        tagElement.appendChild(deleteBtn);
        customTagsContainer.appendChild(tagElement);
      });
    }
    
    // Show editor with existing tag
    function selectTagForEditing(tagName, bgColor, textColor) {
      newTagNameInput.value = tagName;
      newTagBgColorInput.value = bgColor;
      newTagTextColorInput.value = textColor;
      tagColorEditor.style.display = 'block';
      
      // Change button text to reflect editing
      saveNewTagBtn.textContent = 'Update Tag';
    }
    
    // Delete a custom tag
    function deleteCustomTag(tagName) {
      if (confirm(`Are you sure you want to delete tag "${tagName}"?`)) {
        delete savedTagColors[tagName];
        localStorage.setItem('customTagColors', JSON.stringify(savedTagColors));
        renderCustomTagsList();
        applyCustomTagColors();
      }
    }
    
    addCustomTagBtn.addEventListener('click', function() {
      tagColorEditor.style.display = 'block';
      newTagNameInput.value = '';
      newTagBgColorInput.value = '#6c757d';
      newTagTextColorInput.value = '#ffffff';
      saveNewTagBtn.textContent = 'Save Tag';
    });
    
    cancelNewTagBtn.addEventListener('click', function() {
      tagColorEditor.style.display = 'none';
    });
    
    saveNewTagBtn.addEventListener('click', function() {
      const tagName = newTagNameInput.value.trim();
      const bgColor = newTagBgColorInput.value;
      const textColor = newTagTextColorInput.value;
      
      if (!tagName) {
        alert('Tag name cannot be empty!');
        return;
      }
      
      // Save to localStorage
      savedTagColors[tagName] = {
        bg: bgColor,
        text: textColor
      };
      localStorage.setItem('customTagColors', JSON.stringify(savedTagColors));
      
      // Update UI
      renderCustomTagsList();
      applyCustomTagColors();
      
      // Hide editor
      tagColorEditor.style.display = 'none';
      
      // Show feedback
      alert(`Tag "${tagName}" has been saved!`);
    });
    
    // Initial render of custom tags
    renderCustomTagsList();
  });
</script>

<%- include('partials/footer'); %>